@startuml
activate WorkerThread
note over WorkerThread
Either termination was requested through stop token
or Daemon disconnected and state was changed to
kDaemonDisconnected by the crash detection thread.
It also sets the global error to kDaemonDisconnectedFatal
endnote
  alt global_error==kDaemonDisconnectedFatal
    ' CleanPendingJobs function
    WorkerThread -> TraceJobProcessor: CleanPendingJobs()
    activate TraceJobProcessor
    TraceJobProcessor->TraceJobProcessor: Check deallocator function is set
    TraceJobProcessor-> TraceJobContainer: GetReadyElement()
    activate TraceJobContainer
    TraceJobContainer-> TraceJobProcessor: return element
    deactivate TraceJobContainer

    loop no stop requested && element is ready
        note over TraceJobProcessor
        processing all pending jobs.
        There is no need check if the job has been
        processed or not, as in case of the daemon
        termination/crash, it should be considered as
        processed already.
        endnote

        TraceJobProcessor -> TraceJobProcessor : call deallocate function
        note over TraceJobProcessor
        if the element refers to a zero-copy trace
        job the client defined callback also needs
        to be called
        endnote
        opt element.job_type == kShmJob
            note over TraceJobProcessor
            Callbacks are register using the local
            TraceClientID but jobs are filled using
            the remote TraceClientID.
            Therefore the worker thread needs to query
            the container.
            endnote
            TraceJobProcessor-> TraceClientContainer: GetLocalTraceClientId(element.context_id_.client_id_)
            activate TraceClientContainer
            TraceClientContainer -> TraceJobProcessor: return local_client_id
            deactivate TraceClientContainer
            opt local_client_id exists && has a registered callback
                TraceJobProcessor -> TraceJobProcessor: call user-defined \n deallocate callback(element.original_trace.context_id)
            end
            |||
        end
        |||
        loop return != true and no stop requested
            TraceJobProcessor -> TraceJobContainer: ReleaseReadyElement()
            activate TraceJobContainer
            note over TraceJobContainer
            This updates the state of the ring buffer
            and frees the element for acquisition
            endnote
            TraceJobContainer -> TraceJobProcessor: return
            deactivate TraceJobContainer
        end
    |||

        ' Get a new element
        TraceJobProcessor-> TraceJobContainer: GetReadyElement()
        activate TraceJobContainer
        TraceJobContainer-> TraceJobProcessor: return element
        deactivate TraceJobContainer
    end
    |||

    TraceJobProcessor --> WorkerThread: return

participant TraceJobAllocator
    'Close the TMD and the ring buffer shared-memory'
  note over WorkerThread
    close the respective shared memory objects
  endnote
    WorkerThread -> SharedMemoryFactory : Remove(Trace MetaData shared-memory)
    activate SharedMemoryFactory
    WorkerThread -> SharedMemoryFactory : Remove(Ring Buffer shared-memory)
    deactivate SharedMemoryFactory

  else Normal termination of the library instance (stop token is requested)
    note over WorkerThread
    state = kNotInitialized
    endnote
   'unregister TMD shared memory'
    WorkerThread -> DaemonCommunicator :UnregisterSharedMemoryObject(TMD)
    activate DaemonCommunicator
    DaemonCommunicator -> IpcTracingBackend : MessagePassing Send() \n request to unregister TMD shared memory
    activate IpcTracingBackend
    IpcTracingBackend -> DaemonCommunicator: return reply
   'Close the TMD shared-memory'
    WorkerThread -> SharedMemoryFactory : Remove(Trace MetaData shared-memory)
  end
  note over WorkerThread
  clean up the resources
  endnote

  WorkerThread -> DaemonCommunicator : Destructor()
  deactivate DaemonCommunicator

  WorkerThread -> TraceJobProcessor : Destructor()
  deactivate TraceJobProcessor

  WorkerThread -> TraceJobAllocator : Destructor()
  deactivate WorkerThread
  deactivate IpcTracingBackend

  WorkerThread ->[: return

  @enduml
